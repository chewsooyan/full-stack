SCTP-- Skills Career Transition Program
Chapte 1:
=========
It Industry-- computer, software and telecommunication industry
Components of IT --Hardware and  software
S/w development landscape-
	Programming language
	Devlopment methodology--agile, SDLC
	Frameworks
	Containers and Orchestration 
	Cloud computing 
	Mob Development

Job roles
Basic programming languages

What is program
IPO cycle
Low level programming --M/c , assembly
HLL- c, c++,Java,Python 

Procedural Language

Think of it as step-by-step instructions (like a recipe).

You tell the computer how to do something in a sequence.

Example: C, Pascal, BASIC, Python (can also be procedural)

üëâ Example (making tea):

Boil water

Add tea leaves

Add milk

Add sugar

Serve tea

You write code the same way ‚Äî one step after another.

Functional Language

Think of it as solving problems with math-like functions (focus on what you want, not all the steps).

No changing values step by step, instead you combine functions to get the result.

Example: Haskell, Lisp, Erlang, Scala, parts of JavaScript and Python

üëâ Example (making tea in functional style):

Define a function makeTea = boilWater + addTeaLeaves + addMilk + addSugar

You don‚Äôt care about the step order much ‚Äî you just describe the transformations.

SDLC
=====
Real-Time Example: Building a House üè†

Think of software like building a house.

1. Requirement Gathering (What do you need?)

Software: Ask client ‚ÄúWhat features do you want?‚Äù

House: Family decides ‚ÄúWe need 3 bedrooms, 1 kitchen, 2 bathrooms.‚Äù

2. Planning (How to do it?)

Software: Plan budget, timeline, technology.

House: Decide cost, materials, workers, timeline.

3. Design (Blueprint stage)

Software: Make a design (UI screens, database, architecture).

House: Draw blueprint, design rooms, wiring, plumbing.

4. Development (Actual building)

Software: Programmers write code.

House: Workers build walls, roof, doors.

5. Testing (Check everything works)

Software: Test for bugs, errors, performance.

House: Check plumbing, electricity, locks, finishing.

6. Deployment (Hand over to user)

Software: Release the software to customer.

House: Give the keys to the family to move in.

7. Maintenance (Keep it running)

Software: Fix bugs, updates, add new features.

House: Repair leaks, repaint walls, add furniture.

Various SDLC models
====================

Chapter 2:
==========

Algorithm and Flowcharts
Algorithm:An algorithm is a step-by-step procedure or a set of rules for solving a specific problem or completing a specific task. 
Step-by-Step Algorithm (in plain language)
1.	Start.
2.	Boil some water.
3.	Place a tea bag in a cup.
4.	Pour the boiling water into the cup.
5.	Let the tea steep for 3-5 minutes.
6.	Remove the tea bag.
7.	Add sugar or milk if desired.
8.	Stir the tea.
9.	Your tea is ready to drink.
10.	End.


Flowchart : Various symbols
Basic Steps to Create an Algorithm using a Flowchart:

Step 1 - Start: Begin with the start symbol, which is an oval shape.
Step 2 - Input/Processing: Use rectangles to represent processing steps. 
              Write the specific action or operation inside the rectangle.
Step 3 - Decision: If the algorithm involves a decision point, use a diamond 
              shape. Write the condition inside the diamond.
Step 4 - Branching: Use arrows to indicate the flow based on the decision. 
              Typically, one arrow represents "yes‚Äù, and another represents "no."
Step 5 - Output: If there is output, use a parallelogram to represent it.
Step 6 - End: End the flowchart with the end symbol, which is also an oval 
              shape.
Activity 2.3: Algorithm to calculate bank interest

Let us imagine a scenario where a customer, Sarah, has decided to deposit some money into a bank account. She wants to calculate the interest she will earn over a certain period. Sarah approaches the bank and provides the necessary information to the bank representative, John. Design an algorithm and flowchart for calculating the interest on Sarah's bank deposits.

‚ÄÉ
Solution to activity 2.3: Algorithm to calculate bank interest

Algorithm - 
Step 1: Read the amount.
Step 2: Read the years.
Step 3: Read the interest rate.
Step 4: Calculate the interest with the formula "Interest=Amount*Years*Rate/100.
Step 5: Print the interest for the amount.

Flowchart ‚Äì

 




Chapter 3
=========
Version control
Git and GitHub
https://git-scm.com/downloads
git init
git add .
git commit -m "First commit"
git status
git 

Chapter 4:
==========
HTML
CSS
There are three ways of inserting a style sheet:
1.	External CSS - With an external style sheet, you can change the look of an entire website by changing just one file. Each HTML page must include a reference to the external style sheet file inside the <link> element, inside the head section.
2.	Internal CSS - An internal style sheet may be used if one single HTML page has a unique style. The internal style is defined inside the <style> element, inside the head section.
3.	Inline CSS - An inline style may be used to apply a unique style for a single element. To use inline styles, add the style attribute to the relevant element. The style attribute can contain any CSS property.

JavaScript


Chapter 5:
==========
DataBase
in a hotel. It is an example of a dynamic website that uses a database. 
Key Concepts in Database:
‚Ä¢	Data: Data refers to facts, figures, and information that can be processed, stored, and retrieved.

‚Ä¢	Database: A database is an organized collection of data, typically stored and accessed electronically from a computer system.

‚Ä¢	DBMS (Database Management System): A DBMS is software that facilitates the creation, organization, and manipulation of databases. It provides an interface for interacting with the database.

‚Ä¢	Tables: Data in a database is organized into tables. Each table consists of rows and columns, where each row represents a record, and each column represents a field or attribute.

‚Ä¢	SQL (Structured Query Language): SQL is a domain-specific language used for managing and manipulating relational databases. It allows users to query, insert, update, and delete data.
Types of Databases:

CHapter 6:
=========
debugging and touble shooting 
‚Ä¢	Relational Databases: Organize data into tables with predefined relationships between them. Examples include MySQL, PostgreSQL, and Oracle Database.

‚Ä¢	NoSQL Databases: Designed to handle a variety of data models and are often used for large-scale, distributed systems. Examples include MongoDB, Cassandra, and Redis.

‚Ä¢	Object-Oriented Databases: Store data in the form of objects, allowing for more complex data modelling. These are less common than relational databases.

‚Ä¢	Graph Databases: Designed to store and query data in the form of graphs, with nodes and edges representing relationships. Examples include Neo4j and Amazon Neptune.
Commonly used databases in the industry

Selecting the right database is crucial for the success and efficiency of any application. The choice depends on various factors such as the nature of the data, scalability requirements, and specific use cases. Here, we highlight the top 10 databases that are widely used in the industry today.

1.	MySQL
‚Ä¢	Open-source relational database management system (RDBMS)
‚Ä¢	Popular for web applications
‚Ä¢	Uses Structured Query Language (SQL)

2.	PostgreSQL
‚Ä¢	Open-source RDBMS known for its advanced features and extensibility
‚Ä¢	Supports complex queries and large datasets
‚Ä¢	Highly compliant with SQL standards

3.	SQLite
‚Ä¢	Lightweight, serverless, self-contained RDBMS
‚Ä¢	Ideal for small to medium-sized applications
‚Ä¢	Often used in embedded systems and mobile apps

4.	Microsoft SQL Server
‚Ä¢	RDBMS developed by Microsoft
‚Ä¢	Comprehensive and enterprise-grade features
‚Ä¢	Integrated with Microsoft‚Äôs ecosystem

5.	Oracle Database
‚Ä¢	RDBMS developed by Oracle Corporation
‚Ä¢	Known for its robustness, scalability, and advanced security features
‚Ä¢	Widely used in large enterprises

6.	MongoDB
‚Ä¢	NoSQL database known for its flexibility and scalability
‚Ä¢	Uses a document-oriented data model
‚Ä¢	Ideal for handling unstructured or semi-structured data

7.	Redis
‚Ä¢	In-memory data structure store used as a database, cache, and message broker
‚Ä¢	Known for its high performance and speed
‚Ä¢	Supports various data structures such as strings, lists, and sets

8.	MariaDB
‚Ä¢	Open-source RDBMS forked from MySQL
‚Ä¢	Offers similar functionality to MySQL with additional features
‚Ä¢	Compatible with MySQL

9.	Cassandra
‚Ä¢	NoSQL database known for its scalability and high availability
‚Ä¢	Designed to handle large amounts of data across many commodities servers
‚Ä¢	Popular in applications requiring real-time big data

10.	Firebase Realtime Database
‚Ä¢	NoSQL cloud database provided by Google
‚Ä¢	Designed for real-time data synchronization
‚Ä¢	Ideal for mobile and web applications
What Can SQL do?
SQL provides a powerful set of operations to handle data within a relational database. Here are some of the primary capabilities of SQL:

1. Create Databases and Tables
‚Ä¢	SQL can create databases to store organized information and create tables within those databases to hold specific types of data.

2. Insert Data into Tables
‚Ä¢	SQL can insert new records into database tables.

3. Retrieve Data from Tables
‚Ä¢	Using the SELECT statement, SQL can query and retrieve data from one or more tables.
‚Ä¢	SQL can filter, sort, and aggregate data to generate reports and insights.

4. Update Existing Data
‚Ä¢	SQL can update records in a table by modifying data in existing rows.

5. Delete Data
‚Ä¢	SQL can delete records from a table.

6. Control Access to the Database
‚Ä¢	Using Data Control Language (DCL) commands, SQL can grant or revoke access to the database and its objects.

7. Manage Database Structure
‚Ä¢	SQL can modify the structure of existing tables by adding, removing, or altering columns using ALTER statements.

8. Perform Complex Queries with Joins
‚Ä¢	SQL can perform joins to combine data from multiple tables based on related columns.
‚ÄÉ
9. Aggregate and Analyze Data
‚Ä¢	SQL provides functions to aggregate data using COUNT, SUM, AVG, MIN, and MAX, allowing data analysis directly within the database.
10. Handle Transactions
‚Ä¢	SQL can manage transactions to ensure data integrity using COMMIT, ROLLBACK, and SAVEPOINT commands.

SQL is a versatile and powerful language used to interact with relational databases. It allows users to:
‚Ä¢	Create databases and tables.
‚Ä¢	Insert, retrieve, update, and delete data.
‚Ä¢	Control access to data.
‚Ä¢	Perform complex queries and data aggregation.
‚Ä¢	Manage database structure and handle transactions for data integrity.

https://onecompiler.com/mysql/43y657hdg

Benefits of Github







